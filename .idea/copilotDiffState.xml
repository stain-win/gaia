<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apps/gaia/commands.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/gaia/commands.go" />
              <option name="originalContent" value="package main&#10;&#10;import (&#10;&#9;&quot;context&quot;&#10;&#9;&quot;errors&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;&#10;&#9;tea &quot;github.com/charmbracelet/bubbletea&quot;&#10;&#9;&quot;github.com/charmbracelet/huh&quot;&#10;&#9;&quot;github.com/charmbracelet/lipgloss&quot;&#10;&#9;&quot;github.com/stain-win/gaia/apps/gaia/daemon&quot;&#10;)&#10;&#10;// Define styles for the UI.&#10;var (&#10;&#9;titleStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Bold(true).&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;#FF8C00&quot;)). // Orange&#10;&#9;&#9;&#9;PaddingLeft(1)&#10;&#10;&#9;promptStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;#00BFFF&quot;)). // Deep Sky Blue&#10;&#9;&#9;&#9;PaddingRight(1)&#10;&#10;&#9;helpStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;241&quot;)). // Light Gray&#10;&#9;&#9;&#9;MarginTop(1)                       // Add one line of top padding&#10;&#10;&#9;appStyle = lipgloss.NewStyle().Margin(1, 2)&#10;)&#10;&#10;func _validatePassphrase(passphrase string) error {&#10;&#9;if len(passphrase) &lt; 8 {&#10;&#9;&#9;return errors.New(&quot;passphrase must be at least 8 characters&quot;)&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;// A new Bubble Tea model to handle the interactive passphrase input.&#10;type initModel struct {&#10;&#9;form       *huh.Form&#10;&#9;passphrase string&#10;}&#10;&#10;func newInitModel() initModel {&#10;&#9;var passphrase string&#10;&#10;&#9;// The key fix: wrap huh.NewInput in a huh.Group and then a huh.Form.&#10;&#9;// You can also give the field a key like &quot;passphrase&quot; for easy access later.&#10;&#9;form := huh.NewForm(&#10;&#9;&#9;huh.NewGroup(&#10;&#9;&#9;&#9;huh.NewInput().&#10;&#9;&#9;&#9;&#9;Title(titleStyle.Render(&quot;Enter master passphrase&quot;)).&#10;&#9;&#9;&#9;&#9;Prompt(promptStyle.Render(&quot;?&quot;)).&#10;&#9;&#9;&#9;&#9;Validate(_validatePassphrase).&#10;&#9;&#9;&#9;&#9;Value(&amp;passphrase),&#10;&#9;&#9;),&#10;&#9;).WithWidth(40)&#10;&#10;&#9;return initModel{&#10;&#9;&#9;form:       form,&#10;&#9;&#9;passphrase: passphrase,&#10;&#9;}&#10;}&#10;&#10;func (m initModel) Init() tea.Cmd {&#10;&#9;return m.form.Init()&#10;}&#10;&#10;func (m initModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {&#10;&#9;var cmd tea.Cmd&#10;&#9;m.form, cmd = m.form.Update(msg)&#10;&#10;&#9;if m.form.State == huh.StateCompleted {&#10;&#9;&#9;m.passphrase = m.form.GetString(&quot;passphrase&quot;)&#10;&#9;&#9;return m, tea.Quit&#10;&#9;}&#10;&#10;&#9;// Capture Ctrl+C for a clean exit.&#10;&#9;if msg, ok := msg.(tea.KeyMsg); ok &amp;&amp; msg.String() == &quot;ctrl+c&quot; {&#10;&#9;&#9;return m, tea.Quit&#10;&#9;}&#10;&#10;&#9;return m, cmd&#10;}&#10;&#10;func (m initModel) View() string {&#10;&#9;// Render the form and append the styled help message below it.&#10;&#9;return appStyle.Render(&#10;&#9;&#9;lipgloss.JoinVertical(lipgloss.Left,&#10;&#9;&#9;&#9;m.form.View(),&#10;&#9;&#9;&#9;helpStyle.Render(&quot;Press Ctrl+C to quit&quot;),&#10;&#9;&#9;),&#10;&#9;)&#10;}&#10;&#10;// The refactored initCmd function.&#10;func initCmd() {&#10;&#9;fmt.Println(&quot;Initializing Gaia secure storage...&quot;)&#10;&#10;&#9;p := tea.NewProgram(newInitModel(), tea.WithAltScreen())&#10;&#9;finalModel, err := p.Run()&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Println(&quot;Initialization cancelled or failed:&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Assert the type to access the passphrase field.&#10;&#9;if completedModel, ok := finalModel.(initModel); ok {&#10;&#9;&#9;passphrase := strings.TrimSpace(completedModel.passphrase)&#10;&#9;&#9;if passphrase == &quot;&quot; {&#10;&#9;&#9;&#9;fmt.Println(&quot;Initialization cancelled.&quot;)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;err = daemon.InitializeDB(passphrase)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;fmt.Println(&quot;Failed to initialize database:&quot;, err)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Println(&quot;Gaia encrypted database initialized.&quot;)&#10;&#9;&#9;fmt.Printf(&quot;Master passphrase set: '%s'\n&quot;, passphrase)&#10;&#9;}&#10;}&#10;&#10;func stopCmd() {&#10;&#9;fmt.Println(&quot;Running gaia stop...&quot;)&#10;&#9;ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)&#10;&#9;defer cancel()&#10;&#9;err := daemon.Stop(ctx)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Println(&quot;Failed to stop daemon:&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;fmt.Println(&quot;Gaia daemon stopped.&quot;)&#10;}&#10;&#10;func restartCmd() {&#10;&#9;fmt.Println(&quot;Running gaia restart...&quot;)&#10;}&#10;&#10;func statusCmd() {&#10;&#9;fmt.Println(&quot;Running gaia status...&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;context&quot;&#10;&#9;&quot;errors&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;strings&quot;&#10;&#9;&quot;time&quot;&#10;&#10;&#9;tea &quot;github.com/charmbracelet/bubbletea&quot;&#10;&#9;&quot;github.com/charmbracelet/huh&quot;&#10;&#9;&quot;github.com/charmbracelet/lipgloss&quot;&#10;&#9;&quot;github.com/stain-win/gaia/apps/gaia/daemon&quot;&#10;)&#10;&#10;// Define styles for the UI.&#10;var (&#10;&#9;titleStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Bold(true).&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;#FF8C00&quot;)). // Orange&#10;&#9;&#9;&#9;PaddingLeft(1)&#10;&#10;&#9;promptStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;#00BFFF&quot;)). // Deep Sky Blue&#10;&#9;&#9;&#9;PaddingRight(1)&#10;&#10;&#9;helpStyle = lipgloss.NewStyle().&#10;&#9;&#9;&#9;Foreground(lipgloss.Color(&quot;241&quot;)). // Light Gray&#10;&#9;&#9;&#9;MarginTop(1)                       // Add one line of top padding&#10;&#10;&#9;appStyle = lipgloss.NewStyle().Margin(1, 2)&#10;)&#10;&#10;func _validatePassphrase(passphrase string) error {&#10;&#9;if len(passphrase) &lt; 8 {&#10;&#9;&#9;return errors.New(&quot;passphrase must be at least 8 characters&quot;)&#10;&#9;}&#10;&#9;return nil&#10;}&#10;&#10;// A new Bubble Tea model to handle the interactive passphrase input.&#10;type initModel struct {&#10;&#9;form       *huh.Form&#10;&#9;passphrase string&#10;}&#10;&#10;func newInitModel() initModel {&#10;&#9;var passphrase string&#10;&#10;&#9;// The key fix: wrap huh.NewInput in a huh.Group and then a huh.Form.&#10;&#9;// You can also give the field a key like &quot;passphrase&quot; for easy access later.&#10;&#9;form := huh.NewForm(&#10;&#9;&#9;huh.NewGroup(&#10;&#9;&#9;&#9;huh.NewInput().&#10;&#9;&#9;&#9;&#9;Title(titleStyle.Render(&quot;Enter master passphrase&quot;)).&#10;&#9;&#9;&#9;&#9;Prompt(promptStyle.Render(&quot;?&quot;)).&#10;&#9;&#9;&#9;&#9;Validate(_validatePassphrase).&#10;&#9;&#9;&#9;&#9;Value(&amp;passphrase),&#10;&#9;&#9;),&#10;&#9;).WithWidth(40)&#10;&#10;&#9;return initModel{&#10;&#9;&#9;form:       form,&#10;&#9;&#9;passphrase: passphrase,&#10;&#9;}&#10;}&#10;&#10;func (m initModel) Init() tea.Cmd {&#10;&#9;return m.form.Init()&#10;}&#10;&#10;func (m initModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {&#10;&#9;var cmd tea.Cmd&#10;&#9;m.form, cmd = m.form.Update(msg)&#10;&#10;&#9;if m.form.State == huh.StateCompleted {&#10;&#9;&#9;m.passphrase = m.form.GetString(&quot;passphrase&quot;)&#10;&#9;&#9;return m, tea.Quit&#10;&#9;}&#10;&#10;&#9;// Capture Ctrl+C for a clean exit.&#10;&#9;if msg, ok := msg.(tea.KeyMsg); ok &amp;&amp; msg.String() == &quot;ctrl+c&quot; {&#10;&#9;&#9;return m, tea.Quit&#10;&#9;}&#10;&#10;&#9;return m, cmd&#10;}&#10;&#10;func (m initModel) View() string {&#10;&#9;// Render the form and append the styled help message below it.&#10;&#9;return appStyle.Render(&#10;&#9;&#9;lipgloss.JoinVertical(lipgloss.Left,&#10;&#9;&#9;&#9;m.form.View(),&#10;&#9;&#9;&#9;helpStyle.Render(&quot;Press Ctrl+C to quit&quot;),&#10;&#9;&#9;),&#10;&#9;)&#10;}&#10;&#10;// The refactored initCmd function.&#10;func initCmd() {&#10;&#9;fmt.Println(&quot;Initializing Gaia secure storage...&quot;)&#10;&#10;&#9;p := tea.NewProgram(newInitModel(), tea.WithAltScreen())&#10;&#9;finalModel, err := p.Run()&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Println(&quot;Initialization cancelled or failed:&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Assert the type to access the passphrase field.&#10;&#9;if completedModel, ok := finalModel.(initModel); ok {&#10;&#9;&#9;passphrase := strings.TrimSpace(completedModel.passphrase)&#10;&#9;&#9;if passphrase == &quot;&quot; {&#10;&#9;&#9;&#9;fmt.Println(&quot;Initialization cancelled.&quot;)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#10;&#9;&#9;err = daemon.InitializeDB(passphrase)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;fmt.Println(&quot;Failed to initialize database:&quot;, err)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;fmt.Println(&quot;Gaia encrypted database initialized.&quot;)&#10;&#9;&#9;fmt.Printf(&quot;Master passphrase set: '%s'\n&quot;, passphrase)&#10;&#9;}&#10;}&#10;&#10;func stopCmd() {&#10;&#9;fmt.Println(&quot;Running gaia stop...&quot;)&#10;&#9;ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)&#10;&#9;defer cancel()&#10;&#9;err := daemon.Stop(ctx)&#10;&#9;if err != nil {&#10;&#9;&#9;fmt.Println(&quot;Failed to stop daemon:&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;&#9;fmt.Println(&quot;Gaia daemon stopped.&quot;)&#10;}&#10;&#10;func restartCmd() {&#10;&#9;fmt.Println(&quot;Running gaia restart...&quot;)&#10;}&#10;&#10;func statusCmd() {&#10;&#9;fmt.Println(&quot;Running gaia status...&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>