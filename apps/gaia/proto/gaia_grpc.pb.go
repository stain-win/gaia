// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gaia.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GaiaAdmin_AddSecret_FullMethodName      = "/gaia.GaiaAdmin/AddSecret"
	GaiaAdmin_DeleteSecret_FullMethodName   = "/gaia.GaiaAdmin/DeleteSecret"
	GaiaAdmin_ListSecrets_FullMethodName    = "/gaia.GaiaAdmin/ListSecrets"
	GaiaAdmin_RevokeCert_FullMethodName     = "/gaia.GaiaAdmin/RevokeCert"
	GaiaAdmin_GetStatus_FullMethodName      = "/gaia.GaiaAdmin/GetStatus"
	GaiaAdmin_Stop_FullMethodName           = "/gaia.GaiaAdmin/Stop"
	GaiaAdmin_Unlock_FullMethodName         = "/gaia.GaiaAdmin/Unlock"
	GaiaAdmin_Lock_FullMethodName           = "/gaia.GaiaAdmin/Lock"
	GaiaAdmin_RegisterClient_FullMethodName = "/gaia.GaiaAdmin/RegisterClient"
	GaiaAdmin_ListClients_FullMethodName    = "/gaia.GaiaAdmin/ListClients"
	GaiaAdmin_ListNamespaces_FullMethodName = "/gaia.GaiaAdmin/ListNamespaces"
	GaiaAdmin_RevokeClient_FullMethodName   = "/gaia.GaiaAdmin/RevokeClient"
	GaiaAdmin_ImportSecrets_FullMethodName  = "/gaia.GaiaAdmin/ImportSecrets"
)

// GaiaAdminClient is the client API for GaiaAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaiaAdminClient interface {
	AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*AddSecretResponse, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	RevokeCert(ctx context.Context, in *RevokeCertRequest, opts ...grpc.CallOption) (*RevokeCertResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	RevokeClient(ctx context.Context, in *RevokeClientRequest, opts ...grpc.CallOption) (*RevokeClientResponse, error)
	ImportSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportSecretsRequest, ImportSecretsResponse], error)
}

type gaiaAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaAdminClient(cc grpc.ClientConnInterface) GaiaAdminClient {
	return &gaiaAdminClient{cc}
}

func (c *gaiaAdminClient) AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*AddSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSecretResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_AddSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) RevokeCert(ctx context.Context, in *RevokeCertRequest, opts ...grpc.CallOption) (*RevokeCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCertResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_RevokeCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_ListClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) RevokeClient(ctx context.Context, in *RevokeClientRequest, opts ...grpc.CallOption) (*RevokeClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeClientResponse)
	err := c.cc.Invoke(ctx, GaiaAdmin_RevokeClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaAdminClient) ImportSecrets(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImportSecretsRequest, ImportSecretsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GaiaAdmin_ServiceDesc.Streams[0], GaiaAdmin_ImportSecrets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImportSecretsRequest, ImportSecretsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GaiaAdmin_ImportSecretsClient = grpc.ClientStreamingClient[ImportSecretsRequest, ImportSecretsResponse]

// GaiaAdminServer is the server API for GaiaAdmin service.
// All implementations must embed UnimplementedGaiaAdminServer
// for forward compatibility.
type GaiaAdminServer interface {
	AddSecret(context.Context, *AddSecretRequest) (*AddSecretResponse, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	RevokeCert(context.Context, *RevokeCertRequest) (*RevokeCertResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	RevokeClient(context.Context, *RevokeClientRequest) (*RevokeClientResponse, error)
	ImportSecrets(grpc.ClientStreamingServer[ImportSecretsRequest, ImportSecretsResponse]) error
	mustEmbedUnimplementedGaiaAdminServer()
}

// UnimplementedGaiaAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGaiaAdminServer struct{}

func (UnimplementedGaiaAdminServer) AddSecret(context.Context, *AddSecretRequest) (*AddSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecret not implemented")
}
func (UnimplementedGaiaAdminServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedGaiaAdminServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedGaiaAdminServer) RevokeCert(context.Context, *RevokeCertRequest) (*RevokeCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCert not implemented")
}
func (UnimplementedGaiaAdminServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGaiaAdminServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedGaiaAdminServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedGaiaAdminServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedGaiaAdminServer) RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedGaiaAdminServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedGaiaAdminServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedGaiaAdminServer) RevokeClient(context.Context, *RevokeClientRequest) (*RevokeClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeClient not implemented")
}
func (UnimplementedGaiaAdminServer) ImportSecrets(grpc.ClientStreamingServer[ImportSecretsRequest, ImportSecretsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImportSecrets not implemented")
}
func (UnimplementedGaiaAdminServer) mustEmbedUnimplementedGaiaAdminServer() {}
func (UnimplementedGaiaAdminServer) testEmbeddedByValue()                   {}

// UnsafeGaiaAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaiaAdminServer will
// result in compilation errors.
type UnsafeGaiaAdminServer interface {
	mustEmbedUnimplementedGaiaAdminServer()
}

func RegisterGaiaAdminServer(s grpc.ServiceRegistrar, srv GaiaAdminServer) {
	// If the following call pancis, it indicates UnimplementedGaiaAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GaiaAdmin_ServiceDesc, srv)
}

func _GaiaAdmin_AddSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).AddSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_AddSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).AddSecret(ctx, req.(*AddSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_RevokeCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).RevokeCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_RevokeCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).RevokeCert(ctx, req.(*RevokeCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_RevokeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaAdminServer).RevokeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaAdmin_RevokeClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaAdminServer).RevokeClient(ctx, req.(*RevokeClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaAdmin_ImportSecrets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GaiaAdminServer).ImportSecrets(&grpc.GenericServerStream[ImportSecretsRequest, ImportSecretsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GaiaAdmin_ImportSecretsServer = grpc.ClientStreamingServer[ImportSecretsRequest, ImportSecretsResponse]

// GaiaAdmin_ServiceDesc is the grpc.ServiceDesc for GaiaAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GaiaAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gaia.GaiaAdmin",
	HandlerType: (*GaiaAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSecret",
			Handler:    _GaiaAdmin_AddSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _GaiaAdmin_DeleteSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _GaiaAdmin_ListSecrets_Handler,
		},
		{
			MethodName: "RevokeCert",
			Handler:    _GaiaAdmin_RevokeCert_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GaiaAdmin_GetStatus_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _GaiaAdmin_Stop_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _GaiaAdmin_Unlock_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _GaiaAdmin_Lock_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _GaiaAdmin_RegisterClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _GaiaAdmin_ListClients_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _GaiaAdmin_ListNamespaces_Handler,
		},
		{
			MethodName: "RevokeClient",
			Handler:    _GaiaAdmin_RevokeClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportSecrets",
			Handler:       _GaiaAdmin_ImportSecrets_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gaia.proto",
}

const (
	GaiaClient_GetSecret_FullMethodName = "/gaia.GaiaClient/GetSecret"
)

// GaiaClientClient is the client API for GaiaClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaiaClientClient interface {
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error)
}

type gaiaClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaClientClient(cc grpc.ClientConnInterface) GaiaClientClient {
	return &gaiaClientClient{cc}
}

func (c *gaiaClientClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, GaiaClient_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaiaClientServer is the server API for GaiaClient service.
// All implementations must embed UnimplementedGaiaClientServer
// for forward compatibility.
type GaiaClientServer interface {
	GetSecret(context.Context, *GetSecretRequest) (*Secret, error)
	mustEmbedUnimplementedGaiaClientServer()
}

// UnimplementedGaiaClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGaiaClientServer struct{}

func (UnimplementedGaiaClientServer) GetSecret(context.Context, *GetSecretRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedGaiaClientServer) mustEmbedUnimplementedGaiaClientServer() {}
func (UnimplementedGaiaClientServer) testEmbeddedByValue()                    {}

// UnsafeGaiaClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaiaClientServer will
// result in compilation errors.
type UnsafeGaiaClientServer interface {
	mustEmbedUnimplementedGaiaClientServer()
}

func RegisterGaiaClientServer(s grpc.ServiceRegistrar, srv GaiaClientServer) {
	// If the following call pancis, it indicates UnimplementedGaiaClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GaiaClient_ServiceDesc, srv)
}

func _GaiaClient_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaClientServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaClient_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaClientServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GaiaClient_ServiceDesc is the grpc.ServiceDesc for GaiaClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GaiaClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gaia.GaiaClient",
	HandlerType: (*GaiaClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _GaiaClient_GetSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaia.proto",
}
