// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gaia-client.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GaiaClient_GetSecret_FullMethodName        = "/gaia.GaiaClient/GetSecret"
	GaiaClient_GetStatus_FullMethodName        = "/gaia.GaiaClient/GetStatus"
	GaiaClient_GetNamespaces_FullMethodName    = "/gaia.GaiaClient/GetNamespaces"
	GaiaClient_GetCommonSecrets_FullMethodName = "/gaia.GaiaClient/GetCommonSecrets"
)

// GaiaClientClient is the client API for GaiaClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GaiaClientClient interface {
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error)
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	GetNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespaceResponse, error)
	GetCommonSecrets(ctx context.Context, in *GetCommonSecretsRequest, opts ...grpc.CallOption) (*GetCommonSecretsResponse, error)
}

type gaiaClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGaiaClientClient(cc grpc.ClientConnInterface) GaiaClientClient {
	return &gaiaClientClient{cc}
}

func (c *gaiaClientClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*Secret, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secret)
	err := c.cc.Invoke(ctx, GaiaClient_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaClientClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GaiaClient_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaClientClient) GetNamespaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, GaiaClient_GetNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gaiaClientClient) GetCommonSecrets(ctx context.Context, in *GetCommonSecretsRequest, opts ...grpc.CallOption) (*GetCommonSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommonSecretsResponse)
	err := c.cc.Invoke(ctx, GaiaClient_GetCommonSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GaiaClientServer is the server API for GaiaClient service.
// All implementations must embed UnimplementedGaiaClientServer
// for forward compatibility.
type GaiaClientServer interface {
	GetSecret(context.Context, *GetSecretRequest) (*Secret, error)
	GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error)
	GetNamespaces(context.Context, *emptypb.Empty) (*NamespaceResponse, error)
	GetCommonSecrets(context.Context, *GetCommonSecretsRequest) (*GetCommonSecretsResponse, error)
	mustEmbedUnimplementedGaiaClientServer()
}

// UnimplementedGaiaClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGaiaClientServer struct{}

func (UnimplementedGaiaClientServer) GetSecret(context.Context, *GetSecretRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedGaiaClientServer) GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedGaiaClientServer) GetNamespaces(context.Context, *emptypb.Empty) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedGaiaClientServer) GetCommonSecrets(context.Context, *GetCommonSecretsRequest) (*GetCommonSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonSecrets not implemented")
}
func (UnimplementedGaiaClientServer) mustEmbedUnimplementedGaiaClientServer() {}
func (UnimplementedGaiaClientServer) testEmbeddedByValue()                    {}

// UnsafeGaiaClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GaiaClientServer will
// result in compilation errors.
type UnsafeGaiaClientServer interface {
	mustEmbedUnimplementedGaiaClientServer()
}

func RegisterGaiaClientServer(s grpc.ServiceRegistrar, srv GaiaClientServer) {
	// If the following call pancis, it indicates UnimplementedGaiaClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GaiaClient_ServiceDesc, srv)
}

func _GaiaClient_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaClientServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaClient_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaClientServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaClient_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaClientServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaClient_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaClientServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaClient_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaClientServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaClient_GetNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaClientServer).GetNamespaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GaiaClient_GetCommonSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommonSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GaiaClientServer).GetCommonSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GaiaClient_GetCommonSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GaiaClientServer).GetCommonSecrets(ctx, req.(*GetCommonSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GaiaClient_ServiceDesc is the grpc.ServiceDesc for GaiaClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GaiaClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gaia.GaiaClient",
	HandlerType: (*GaiaClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _GaiaClient_GetSecret_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _GaiaClient_GetStatus_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _GaiaClient_GetNamespaces_Handler,
		},
		{
			MethodName: "GetCommonSecrets",
			Handler:    _GaiaClient_GetCommonSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaia-client.proto",
}
